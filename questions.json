[
  {
    "title": "Group Anagrams",
    "question": "\n**Given an array of strings strs, group the anagrams together. You can return the answer in any order.**\n\n**Example 1:**\n\n**Input:** `strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]`\n\n**Output:** `[[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]`\n\n**Explanation:**\n\n- There is no string in strs that can be rearranged to form \"bat\".\n- The strings \"nat\" and \"tan\" are anagrams as they can be rearranged to form each other.\n- The strings \"ate\", \"eat\", and \"tea\" are anagrams as they can be rearranged to form each other.\n        ",
    "answer": "\n**Solution: Use Hash Map with Sorted Characters**\n\n```python\ndef groupAnagrams(self, strs: List[str]) -> List[List[str]]:\n        # dict_ = coll{[]: [str1, str2, str3]}\n        dict_ = defaultdict(list)\n        for s in strs:\n            count = [0]*26\n            for ch in s:\n                count[ord(ch)-ord(\"a\")] += 1\n            dict_[tuple(count)].append(s)\n        return dict_.values()\n```\n\n**Key Insight:**\n- Anagrams have the same characters when sorted\n- Use sorted string as hash map key\n- Group all strings with same sorted key\n\n**Time Complexity:** O(N * M log M) where N = number of strings, M = average length\n**Space Complexity:** O(N * M) for the hash map\n        ",
    "tags": ["Medium", "Hash Map", "String"]
  },
  {
    "title": "Top K Frequent Elements",
    "question": "Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.\n\n \n\nExample 1:\n\nInput: nums = [1,1,1,2,2,3], k = 2\n\nOutput: [1,2]",
    "answer": "def topKFrequent(nums, k):\n        dic = Counter(nums)\n        \n        #insert frequency into count frequency buke\n        max_freq = max(dic.values())+1\n        bucket = [[] for _ in range(max_freq)]\n        \n        for num, freq in dic.items():\n            bucket[freq].append(num)\n            \n        res = []\n        for i in range(len(bucket)-1, -1, -1):\n            for el in bucket[i]:\n                res.append(el)\n                if len(res)==k:\n                    return res",
    "tags": []
  },
  {
    "title": "Top K Frequent Elements",
    "question": "Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.\n\n \n\nExample 1:\n\nInput: nums = [1,1,1,2,2,3], k = 2\n\nOutput: [1,2]",
    "answer": "def topKFrequent(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \"\"\"\n        Count the items in nums and put thm in a biucket based on their count. Traverse this bucekt and collect in result \n        \n        index = count\n        append the number in the count index \n        T: O(N)\n        M: O(N+M)\n        \"\"\"\n        dic = Counter(nums)\n        \n        #insert frequency into count frequency buke\n        max_freq = max(dic.values())+1\n        bucket = [[] for _ in range(max_freq)]\n        \n        for num, freq in dic.items():\n            bucket[freq].append(num)\n            \n        res = []\n        for i in range(len(bucket)-1, -1, -1):\n            for el in bucket[i]:\n                res.append(el)\n                if len(res)==k:\n                    return res"
  },
  {
    "title": "Top K Frequent Elements",
    "question": "\n**Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.**\n\n**Example 1:**\n\n**Input:** `nums = [1,1,1,2,2,3], k = 2`\n\n**Output:** `[1,2]`\n\n**Explanation:**\n- 1 appears 3 times\n- 2 appears 2 times  \n- 3 appears 1 time\n- So the 2 most frequent are [1,2]\n    ",
    "answer": "\n**Solution: Use Counter and Bucket Sort**\n\n```python\ndef topKFrequent(nums, k):\n    from collections import Counter\n    \n    # Count frequency of each number\n    count = Counter(nums)\n    \n    # Create buckets: index = frequency, value = list of numbers\n    max_freq = max(count.values())\n    bucket = [[] for _ in range(max_freq + 1)]\n    \n    # Put numbers in buckets by their frequency\n    for num, freq in count.items():\n        bucket[freq].append(num)\n    \n    # Collect results from highest frequency bucket\n    result = []\n    for i in range(len(bucket) - 1, -1, -1):\n        for num in bucket[i]:\n            result.append(num)\n            if len(result) == k:\n                return result\n    \n    return result\n```\n\n**Key Insight:**\n- Count frequency of each number\n- Use bucket sort: index = frequency, value = numbers with that frequency\n- Traverse buckets from highest to lowest frequency\n\n**Time Complexity:** O(n) where n = length of nums\n**Space Complexity:** O(n) for the counter and buckets\n    "
  },
  {
    "title": "Top K Frequent Elements",
    "question": "\n**Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.**\n\n**Example 1:**\n\n**Input:** `nums = [1,1,1,2,2,3], k = 2`\n\n**Output:** `[1,2]`\n\n**Explanation:**\n- 1 appears 3 times\n- 2 appears 2 times  \n- 3 appears 1 time\n- So the 2 most frequent are [1,2]\n    ",
    "answer": "\n**Solution: Use Counter and Bucket Sort**\n\n```python\ndef topKFrequent(nums, k):\n    from collections import Counter\n    \n    # Count frequency of each number\n    count = Counter(nums)\n    \n    # Create buckets: index = frequency, value = list of numbers\n    max_freq = max(count.values())\n    bucket = [[] for _ in range(max_freq + 1)]\n    \n    # Put numbers in buckets by their frequency\n    for num, freq in count.items():\n        bucket[freq].append(num)\n    \n    # Collect results from highest frequency bucket\n    result = []\n    for i in range(len(bucket) - 1, -1, -1):\n        for num in bucket[i]:\n            result.append(num)\n            if len(result) == k:\n                return result\n    \n    return result\n```\n\n**Key Insight:**\n- Count frequency of each number\n- Use bucket sort: index = frequency, value = numbers with that frequency\n- Traverse buckets from highest to lowest frequency\n\n**Time Complexity:** O(n) where n = length of nums\n**Space Complexity:** O(n) for the counter and buckets\n    "
  },
  {
    "title": "Two Sum",
    "question": "\n**Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.**\n\n**Example 1:**\n**Input:** `nums = [2,7,11,15], target = 9`\n**Output:** `[0,1]`\n\n**Example 2:**\n**Input:** `nums = [3,2,4], target = 6`\n**Output:** `[1,2]`\n        ",
    "answer": "\n**Solution: Hash Map**\n\n```python\ndef twoSum(nums, target):\n    seen = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in seen:\n            return [seen[complement], i]\n        seen[num] = i\n    return []\n```\n\n**Time Complexity:** O(n)\n**Space Complexity:** O(n)\n        ",
    "tags": ["Easy", "Hash Map", "Array"]
  },
  {
    "title": "Best Time to Buy and Sell Stock",
    "question": "\n**You are given an array prices where prices[i] is the price of a given stock on the ith day.**\n\n**You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.**\n\n**Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.**\n\n**Example 1:**\n**Input:** `prices = [7,1,5,3,6,4]`\n**Output:** `5`\n        ",
    "answer": "\n**Solution: Keep Track of Minimum Price**\n\n```python\ndef maxProfit(prices):\n    min_price = float('inf')\n    max_profit = 0\n    \n    for price in prices:\n        min_price = min(min_price, price)\n        max_profit = max(max_profit, price - min_price)\n    \n    return max_profit\n```\n\n**Time Complexity:** O(n)\n**Space Complexity:** O(1)\n        ",
    "tags": ["Easy", "Array", "Greedy"]
  },
  {
    "title": "Contains Duplicate",
    "question": "\n**Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.**\n\n**Example 1:**\n**Input:** `nums = [1,2,3,1]`\n**Output:** `true`\n\n**Example 2:**\n**Input:** `nums = [1,2,3,4]`\n**Output:** `false`\n        ",
    "answer": "\n**Solution: Set**\n\n```python\ndef containsDuplicate(nums):\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n```\n\n**Time Complexity:** O(n)\n**Space Complexity:** O(n)\n        "
  },
  {
    "title": "Product of Array Except Self",
    "question": "\n**Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].**\n\n**You must write an algorithm that runs in O(n) time and without using the division operator.**\n\n**Example 1:**\n**Input:** `nums = [1,2,3,4]`\n**Output:** `[24,12,8,6]`\n        ",
    "answer": "\n**Solution: Two Passes**\n\n```python\ndef productExceptSelf(nums):\n    n = len(nums)\n    result = [1] * n\n    \n    # First pass: left products\n    for i in range(1, n):\n        result[i] = result[i-1] * nums[i-1]\n    \n    # Second pass: right products\n    right = 1\n    for i in range(n-1, -1, -1):\n        result[i] *= right\n        right *= nums[i]\n    \n    return result\n```\n\n**Time Complexity:** O(n)\n**Space Complexity:** O(1)\n        "
  },
  {
    "title": "Maximum Subarray",
    "question": "\n**Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.**\n\n**Example 1:**\n**Input:** `nums = [-2,1,-3,4,-1,2,1,-5,4]`\n**Output:** `6`\n**Explanation:** `[4,-1,2,1]` has the largest sum = 6.\n        ",
    "answer": "\n**Solution: Kadane's Algorithm**\n\n```python\ndef maxSubArray(nums):\n    max_sum = current_sum = nums[0]\n    \n    for i in range(1, len(nums)):\n        current_sum = max(nums[i], current_sum + nums[i])\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum\n```\n\n**Time Complexity:** O(n)\n**Space Complexity:** O(1)\n        "
  },
  {
    "title": "Maximum Product Subarray",
    "question": "\n**Given an integer array nums, find a contiguous non-empty subarray within the array that has the largest product, and return the product.**\n\n**Example 1:**\n**Input:** `nums = [2,3,-2,4]`\n**Output:** `6`\n**Explanation:** `[2,3]` has the largest product = 6.\n        ",
    "answer": "\n**Solution: Keep Track of Min and Max**\n\n```python\ndef maxProduct(nums):\n    if not nums:\n        return 0\n    \n    max_prod = min_prod = result = nums[0]\n    \n    for i in range(1, len(nums)):\n        if nums[i] < 0:\n            max_prod, min_prod = min_prod, max_prod\n        \n        max_prod = max(nums[i], max_prod * nums[i])\n        min_prod = min(nums[i], min_prod * nums[i])\n        result = max(result, max_prod)\n    \n    return result\n```\n\n**Time Complexity:** O(n)\n**Space Complexity:** O(1)\n        "
  },
  {
    "title": "Find Minimum in Rotated Sorted Array",
    "question": "\n**Suppose an array of length n sorted in ascending order is rotated between 1 and n times.**\n\n**Given the sorted rotated array nums of unique elements, return the minimum element of this array.**\n\n**Example 1:**\n**Input:** `nums = [3,4,5,1,2]`\n**Output:** `1`\n        ",
    "answer": "\n**Solution: Binary Search**\n\n```python\ndef findMin(nums):\n    left, right = 0, len(nums) - 1\n    \n    while left < right:\n        mid = (left + right) // 2\n        if nums[mid] > nums[right]:\n            left = mid + 1\n        else:\n            right = mid\n    \n    return nums[left]\n```\n\n**Time Complexity:** O(log n)\n**Space Complexity:** O(1)\n        "
  },
  {
    "title": "Search in Rotated Sorted Array",
    "question": "\n**There is an integer array nums sorted in ascending order (with distinct values).**\n\n**Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k.**\n\n**Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.**\n\n**Example 1:**\n**Input:** `nums = [4,5,6,7,0,1,2], target = 0`\n**Output:** `4`\n        ",
    "answer": "\n**Solution: Binary Search with Rotation Check**\n\n```python\ndef search(nums, target):\n    left, right = 0, len(nums) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if nums[mid] == target:\n            return mid\n        \n        # Check which half is sorted\n        if nums[left] <= nums[mid]:\n            if nums[left] <= target < nums[mid]:\n                right = mid - 1\n            else:\n                left = mid + 1\n        else:\n            if nums[mid] < target <= nums[right]:\n                left = mid + 1\n            else:\n                right = mid - 1\n    \n    return -1\n```\n\n**Time Complexity:** O(log n)\n**Space Complexity:** O(1)\n        "
  },
  {
    "title": "3Sum",
    "question": "\n**Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.**\n\n**Notice that the solution set must not contain duplicate triplets.**\n\n**Example 1:**\n**Input:** `nums = [-1,0,1,2,-1,-4]`\n**Output:** `[[-1,-1,2],[-1,0,1]]`\n        ",
    "answer": "\n**Solution: Sort + Two Pointers**\n\n```python\ndef threeSum(nums):\n    nums.sort()\n    result = []\n    \n    for i in range(len(nums) - 2):\n        if i > 0 and nums[i] == nums[i-1]:\n            continue\n        \n        left, right = i + 1, len(nums) - 1\n        \n        while left < right:\n            total = nums[i] + nums[left] + nums[right]\n            if total == 0:\n                result.append([nums[i], nums[left], nums[right]])\n                while left < right and nums[left] == nums[left + 1]:\n                    left += 1\n                while left < right and nums[right] == nums[right - 1]:\n                    right -= 1\n                left += 1\n                right -= 1\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    \n    return result\n```\n\n**Time Complexity:** O(n\u00b2)\n**Space Complexity:** O(1)\n        "
  },
  {
    "title": "Container With Most Water",
    "question": "\n**You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).**\n\n**Find two lines that together with the x-axis form a container, such that the container contains the most water.**\n\n**Example 1:**\n**Input:** `height = [1,8,6,2,5,4,8,3,7]`\n**Output:** `49`\n        ",
    "answer": "\n**Solution: Two Pointers**\n\n```python\ndef maxArea(height):\n    left, right = 0, len(height) - 1\n    max_area = 0\n    \n    while left < right:\n        area = min(height[left], height[right]) * (right - left)\n        max_area = max(max_area, area)\n        \n        if height[left] < height[right]:\n            left += 1\n        else:\n            right -= 1\n    \n    return max_area\n```\n\n**Time Complexity:** O(n)\n**Space Complexity:** O(1)\n        "
  }
]